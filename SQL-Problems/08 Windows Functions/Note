https://www.windowfunctions.com/questions/intro/
=========================================================================================================================
Table Runners

name	weight	country
-------------------------
andy	50	    UK
bob	    100	    UK
cedric	50	    France
dave	70	    Germany
eric	70	    France
**************************************************** GROUP BY & HAVING **************************************************
Group by allows us to group data for use in aggregate functions (like sum, count & avg)
Having allows us to filter data from aggregate functions

Consider a query where we wanted to find the average weight of the runners grouped by country. This can be done like this:

SELECT
    country,
    AVG(weight)
FROM
    runners
GROUP BY country

country	    avg_weight
-------------------
UK	        75
France	    60
Germany	    70

************************************************ BASIC OVER (RUNNING TOTAL) **************************************************
Over is useful in limiting or tweaking the data returned from aggregate functions
Think of over as like a running total. For instance in our runners table, we have a query that selects name and average
weight of all the runners seen so far when ordered by name. Here average_weight is recomputed on each 'step' of the SQL output

SELECT
    name,
    weight,
    AVG(weight) OVER (ORDER BY name)
FROM
    runners
ORDER BY name
LIMIT 3

name	weight	avg_weight
---------------------------
andy	50	    50   First Record
bob	    100	    75   (50+100/2 = 75)
cedric	50	    63   (75+50/2 = 62.5)


**************************************************** PARTITION BY *******************************************************
Partition by allows us to further subdivide the preceding Over Command
Here avg_weight is recomputed on every 'step' of the SQL like above BUT it is reset when the partition by field changes.
In this case we partition by country (think of it as grouping by country). There is a different aggregate function for each country

SELECT
    name,
    weight,
    country,
    AVG(weight) OVER (PARTITION BY country ORDER BY name)
FROM runners
ORDER BY name

name	weight	country	  avg_weight
-----------------------------------
andy	50	    UK	      50    First Record for UK
bob	    100	    UK	      75    (50+100/2 = 75)
cedric	50	    France    50    First Record for France
dave	70	    Germany   70    First Record for Germany
eric	70	    France	  60    (50+70/2 = 60)

************************************************ PRECEDING & FOLLOWING ************************************************
Preceding and Following allow us to perform aggregate functions on the rows just before and after the current row.
Here we will list the weight and the minimum weight of each runner and their neighbours just before and after them.

MIN(andy) = MIN(50, 100)
MIN(bob) = MIN(50, 100, 50)
MIN(cedric) = MIN(100, 50, 70)
MIN(dave) = MIN(50, 70, 70)
MIN(eric) = MIN(70, 70)

SELECT
    name,
    weight,
    MIN(weight) OVER (ORDER BY name ROWS BETWEEN 1 PRECEDING AND 1 FOLLOWING)
FROM
    runners
ORDER BY name

name	weight	min
---------------------
andy	50	    50
bob	    100	    50
cedric	50	    50
dave	70	    50
eric	70	    70

************************************************** RUNNING TOTAL VS TRUE RUNNING TOTAL *****************************************************
What‚Äôs a RUNNING TOTAL Total?
A running total (also called a cumulative sum) is a value that adds up a column‚Äôs values progressively row by row, following a specific order.
For example, with a table like:
Row	Value
------------
A	10
B	20
C	30
The running total is:
Row	Running Total
--------------------
A	10
B	30 (10+20)
C	60 (10+20+30)

üß† So What Is a ‚ÄúTRUE‚Äù RUNNING TOTAL?
Sometimes, people say ‚Äútrue running total‚Äù to emphasize that the cumulative sum should:

Strictly follow row order (i.e. one row at a time)
Not group or collapse rows with the same ordering value
Include only prior rows and the current row
This distinction matters when multiple rows share the same value in the ORDER BY clause, and the SQL engine defaults to RANGE instead of ROWS.

üß™ Example (Key Difference)
Assume this table:
Name	Weight	Created_At
----------------------------
A	    10	    2023-01-01
B	    20	    2023-01-01
C	    30	    2023-01-02

Now run:

SELECT
    name,
    SUM(weight) OVER (ORDER BY created_at) AS running_total
FROM cats;

Without specifying the frame, most SQL engines default to: RANGE BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW
This means: Rows A and B have the same created_at(2023-01-01), so they‚Äôre grouped together in the same "frame".

The running total for both A and B becomes 30 (10+20).
Result:
Name	Running Total
------------------------
A	    30
B	    30
C	    60

üî¥ This is not a "true" row-by-row running total ‚Äî it grouped rows.
‚úÖ Now Add ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW

SELECT
    name,
    SUM(weight) OVER (
        ORDER BY created_at
        ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW
    ) AS running_total
FROM cats;

Now it behaves like a TRUE running total, row-by-row:

Name	Running Total
-----------------------
A	    10
B	    30 (10 + 20)
C	    60 (10 + 20 + 30)

‚úÖ This is what people mean by ‚Äútrue running total‚Äù ‚Äî each row sees only what came before it (by order), not other rows with the same sort key.

üîÅ Summary
Term	                Meaning
-----------------------------------------------------------------------------------------------------------
Running Total	        A cumulative sum based on an ordering column
"True" Running Total	A row-by-row cumulative sum that doesn‚Äôt collapse ties (uses ROWS, not RANGE)

************************************************** ROW NUMBER / RANK / DENSE RANK ***********************************************************
Row_number, Rank and Dense_rank - These three functions will number each row. Using row_number gives a result that must always be unique.
Each row is assigned a different value even if they are equal
The easiest way to explain rank and dense_rank is to imagine ranking the runners of a race.
Consider: If 2 runners finish in equal 3rd, is the next runner's place 4th (dense_rank) or 5th (rank).

SELECT
    name,
    time,
    ROW_NUMBER() OVER (ORDER BY time),
    RANK() OVER (ORDER BY time),
    DENSE_RANK() OVER (ORDER BY time)
FROM
    runners
ORDER BY time

name	time	row_number	  rank	     dense_rank
----------------------------------------------------
andy	101	        1	        1	        1
bob	    103	        2	        2	        2
cedric	104	        3	        3	        3
dave	104	        4	        3	        3
eric	108	        5	        5	        4

************************************************** CUMULATIVE DISTINCT / PERCENTAGE RANK ***********************************************************
Cume_dist & Percent_rank - These 2 functions calculate the relative rank of a group of rows

percent_rank returns a number from 1 to 0. The highest being 1 and the lowest 0.
cume_dist will return a number from 1 towards 0 but never 0. a.k.a percentile

Think of it this way:
If there are 4 different values do you count down from 1 in steps of 0.25 (percent_rank) or in steps of 0.2 ensuring that we never hit 0 (cume_dist)

SELECT
    name,
    time,
    PERCENT_RANK() OVER (ORDER BY time),
    CUME_DIST() OVER (ORDER BY time)
FROM runners
ORDER BY time

name	time	percent_rank	cume_dist
------------------------------------------
andy	101	    0	            0.2
bob	    103	    0.25	        0.4
cedric	104	    0.5	            0.8
dave	104	    0.5	            0.8
eric	108	    1               1

************************************************** LAG / LEAD ***********************************************************
Lag and Lead - These functions allow you to examine the next or previous row. You may then compare this value to the current row
Consider a race where we wanted to see the time of the person in front of us and the amount of time we beat the person behind us by

SELECT
    name,
    time,
    LAG(time, 1) OVER (ORDER BY time) AS time_of_person_infront_of_me,
    LEAD(time, 1) OVER (ORDER BY time) - time AS how_much_i_was_infront_of_ther_person_behind_me
FROM
    runners
ORDER BY time

name	time	time_of_person_infront_of_me	how_much_i_was_infront_of_ther_person_behind_me
-----------------------------------------------------------------------------------------------------
andy	101	    None	                        2
bob	    103	    101	                            1
cedric	104	    103	                            0
dave	104	    104	                            4
eric	108	    104	                            None

nth_value (& first_value) and ntile - Unsurprisingly nth_value will return the nth_value,
but if we do not specify a range it will return null if the current value is less than the nth.
If we always want something displayed we need to specify a range
ntile(n) divides the group into n equal partitions and denotes which partition each row is in.

Let us go back to our race and print how much faster a runner needs to go to finish on the podium (1st, 2nd or 3rd),
the time of the second runner and finally we will use ntile(2) to determine if they are in the top half of runners

SELECT
    name,
    time,
    NTH_VALUE(time, 3) OVER (ORDER BY time) - time AS to_go_faster_to_make_podium,
    NTH_VALUE(time, 2) OVER (ORDER BY time RANGE BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING) AS time_of_second_runner,
    NTILE(2) OVER (ORDER BY time) as which_half
FROM
    runners
ORDER BY time;

name	time	to_go_faster_to_make_podium 	time_of_second_runner	which_half
-----------------------------------------------------------------------------------------------------
andy	101	    None (Running 1st, i.e under 3)	      103	                    1
bob	    103	    None (Running 2nd, i.e under 3)	      103	                    1
cedric	104	    0	 (Running 3rd, i.e at 3)          103	                    1
dave	104	    0	 (Running 3rd, i.e at 3)          103	                    2
eric	108	    -4	 (needs -4 time to become 3rd)    103	                    2

Explained:
nth_value(time, 3) OVER (ORDER BY time) - time AS to_go_faster_to_make_podium
-- nth_value(time, 3) picks the 3rd fastest time.
-- OVER (ORDER BY time) means we sort by time (fastest first).
-- For each row, this function returns the 3rd place time.
-- Subtracting time from it gives:
    -- If the runner is slower than 3rd place ‚Üí a positive value: how much faster they need to be to make the podium.
    -- If the runner is in top 3 ‚Üí it will be 0 or negative.


nth_value(time, 2) OVER (ORDER BY time RANGE BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING) AS time_of_second_runner
-- This is another way to get the 2nd place time.
-- The RANGE BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING makes sure the entire table is in the frame,
    so it consistently returns the same value for every row.
-- So, for every runner, this column just shows the 2nd fastest time overall.


ntile(2) OVER (ORDER BY time) AS which_half
-- ntile(2) divides the dataset into 2 buckets (tiles) based on order of time.
-- Lower times go in tile 1, slower times go in tile 2.
-- This effectively divides runners into top half vs bottom half performers.

************************************************** FILTER **************************************************************
Filter is to be used with aggregate functions or window functions. It allows us to filter out values
In this example we print average runner time and then filter on the runners weighing less than 90kg
to produce the light_runners_time column which will result in bob (UK) being removed.

SELECT
    country,
    AVG(time) AS avg_time,
    AVG(time) FILTER (WHERE weight < 90) AS light_runners_time
FROM
    runners
GROUP BY country

country	    avg_time	light_runners_time
---------------------------------------
UK	        102	        101
France	    106	        106
Germany	    104	        104

************************************************** ARRAY AGG ***********************************************************
Array Agg is not a window function but it is interesting
Array Agg allows us to select several entries into one. Think of it as compressing the values into an Array object

SELECT
    ARRAY_AGG(time)
FROM
    runners;

Outpout -> ARRAY_AGG -> {101,103,104,104,108}

***************************************************** WINDOW ***********************************************************
Window allows us to name an SQL window function so it can be reused easily.
It turns out to be very hard to write an example for it.
